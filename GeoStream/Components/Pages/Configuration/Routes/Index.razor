@page "/routes"
@using Microsoft.AspNetCore.Authorization
@using GeoStream.Dtos
@using GeoStream.Dtos.Configuration
@using GeoStream.Services
@using GeoStream.Models.Enums
@inject IApiClient apiClient
@inject NavigationManager navigationManager

@attribute [Authorize]

<div class="content-wrapper">
    @if (!string.IsNullOrEmpty(notificationMessage.Value))
    {
        <MudAlert Severity="@(GetIncidentSeverity())" Class="mb-2">
            @notificationMessage
        </MudAlert>
    }
    <MudGrid>
        <MudItem xs="12" sm="6">
            <MudFileUpload T="IReadOnlyList<IBrowserFile>" Accept=".kmz" FilesChanged="UploadKmzFiles" MaximumFileCount="100">
                <ButtonTemplate Context="uploadContext">
                    <MudButton HtmlTag="label"
                    Variant="Variant.Filled"
                    Color="Color.Primary"
                    StartIcon="@Icons.Material.Filled.CloudUpload"
                    for="@uploadContext.Id">
                        Routes (KMZ)
                    </MudButton>
                </ButtonTemplate>
            </MudFileUpload>
        </MudItem>
        <MudItem xs="12" sm="6" Class="d-flex justify-content-end">
            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@(() => navigationManager.NavigateTo("/routes/new"))">
                <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-2" />Add Route
            </MudButton>
        </MudItem>
    </MudGrid>

    <MudPaper Class="mt-3">
        <MudTable Items="@routes" Dense="true" Hover="true" Striped="true" Bordered="true">
            <ToolBarContent>
                <MudText Typo="Typo.h6">
                    <MudIcon Icon="@Icons.Material.Filled.Directions" Style="color: #4CAF50;" /> Routes
                </MudText>
                @if (isLoading)
                {
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" Style="margin-left: 10px;" />
                }
                <MudSpacer />
                <MudTextField Value="@searchString" Immediate="true" ValueChanged="@((string newValue) => OnSearchTextChanged(newValue))" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>

            <HeaderContent>
                <MudTh><MudTableSortLabel SortBy="new Func<RouteDto, object>(x=>x.Name)">Name</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<RouteDto, object>(x=>x.Description)">Description</MudTableSortLabel></MudTh>
                <MudTh>Status</MudTh>
                <MudTh>Action</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Description">@context.Description</MudTd>
                <MudTd DataLabel="State">
                    @if (context.IsActive)
                    {
                        <MudChip Color="Color.Success" OnClick="@(()=> ToggleState(context.Id))">Active</MudChip>
                    }
                    else
                    {
                        <MudChip Color="Color.Error" OnClick="@(()=> ToggleState(context.Id))">Inactive</MudChip>
                    }
                </MudTd>
                <MudTd DataLabel="Action">
                    <div style="white-space:nowrap">
                        <MudIconButton Icon="@Icons.Material.Filled.Search" OnClick="@(()=> navigationManager.NavigateTo($"/routes/{context.Id}"))" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(()=> DeleteRoute(context.Id))" />
                    </div>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager RowsPerPageString="No. of rows per page" InfoFormat="{first_item}-{last_item} of {all_items}" />
            </PagerContent>
        </MudTable>
    </MudPaper>
</div>

@code {
    private bool isLoading = true;
    private MarkupString notificationMessage = default;
    private bool isOperationSuccessful = false;

    private string searchString = "";

    private int totalItems;
    private int currentPage = 1;
    private const int pageSize = 10;

    private List<RouteDto> routes = new List<RouteDto>();
    private List<RouteDto> allRoutes = new List<RouteDto>();


    protected override async Task OnInitializedAsync()
    {
        var result = await apiClient.SendRequest<ApiResponseDto<List<RouteDto>>>("ScannersApi.Route.GetAll", null, null, new Dictionary<string, string> { { "orderBy", "Name" } });

        if (result.Succeeded)
        {
            if (result.Data?.Count() > 0)
            {
                allRoutes = result.Data;
                routes = allRoutes.ToList();
            }
            else
            {
                await ShowNotification($"No routes have been registered.");
            }
        }
        else
        {
            await ShowNotification($"Error retrieving the data from the API.");
        }

        isLoading = false;
    }

    private void OnSearchTextChanged(string newValue)
    {
        searchString = newValue;
        currentPage = 1;

        FilterRoutes();
    }

    private void FilterRoutes()
    {
        if (!string.IsNullOrWhiteSpace(searchString))
        {

            routes = allRoutes.Where(route =>
                route.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
                route.Description is not null && route.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase)).ToList();
        }
        else
        {
            routes = allRoutes.ToList();
        }
    }

    private async Task ToggleState(long routeId)
    {
        var route = routes.Find(x => x.Id == routeId);

        if (route != null)
        {
            route.SwitchStatus();

            var response = await apiClient.SendRequest<ApiResponseDto<RouteDto>>("ScannersApi.Route.Update", new { StatusId = route.StatusId }, new Dictionary<string, string> { { "id", route.Id.ToString() } });

            if (!response.Succeeded)
            {
                route.SwitchStatus();
                await ShowNotification($"Error changing the state of the route '{route.Name}'", true);
            }
        }
    }

    private async Task DeleteRoute(long routeId)
    {
        var response = await apiClient.SendRequest<ApiResponseDto<RouteDto>>("ScannersApi.Route.Delete", null, new Dictionary<string, string> { { "id", routeId.ToString() } });

        if (response.Succeeded)
        {
            allRoutes.RemoveAll(x => x.Id == routeId);
            routes = allRoutes.ToList();
        }
        else
        {
            await ShowNotification(string.Join(". ", response.Errors ?? new List<string> { "Error." }));
        }
    }

    private async Task UploadKmzFiles(IReadOnlyList<IBrowserFile> files)
    {
        isLoading = true;

        List<RouteDto> routeDtos = new List<RouteDto>();

        foreach (var file in files)
        {
            if (file != null)
            {
                var buffer = new byte[file.Size];
                await file.OpenReadStream().ReadAsync(buffer);
                var KmzFile = buffer;
                routeDtos.Add(new RouteDto()
                {
                    KmzFile = KmzFile
                });
            }
        }

        var response = await apiClient.SendRequest<ApiResponseDto<List<RouteDto>>>("ScannersApi.Route.UpdateRange", routeDtos);

        if (response.Succeeded)
        {
            isOperationSuccessful = true;
            notificationMessage = new MarkupString("Routes successfully registered.");
        }
        else
        {
            isOperationSuccessful = false;
            notificationMessage = new MarkupString(string.Join(". ", response.Errors ?? new List<string> { "Error." }));
        }

        if (response.Data != null)
        {
            routes.AddRange(response.Data);
        }

        isLoading = false;
    }

    private async Task ShowNotification(string msg, bool temporary = false)
    {
        notificationMessage = new MarkupString(msg);
        StateHasChanged();
        if (temporary)
        {
            await Task.Delay(5000);
            notificationMessage = default;
        }
    }

    private MudBlazor.Severity GetIncidentSeverity()
    {
        return isOperationSuccessful ? MudBlazor.Severity.Success : MudBlazor.Severity.Error;
    }
}
