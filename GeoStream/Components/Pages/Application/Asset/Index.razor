@page "/assets"
@using Microsoft.AspNetCore.Authorization
@using GeoStream.Dtos
@using GeoStream.Dtos.Configuration
@using GeoStream.Dtos.Application
@using GeoStream.Services
@inject IApiClient apiClient
@inject NavigationManager navigationManager

@attribute [Authorize]

<div class="content-wrapper">
    @if (!string.IsNullOrEmpty(notificationMessage.Value))
    {
        <MudAlert Severity="MudBlazor.Severity.Error" Class="mb-2">
            @notificationMessage
        </MudAlert>
    }
    <MudGrid>
        <MudItem xs="12" sm="6">
        </MudItem>
        <MudItem xs="12" sm="6" Class="d-flex justify-content-end">
            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@(() => navigationManager.NavigateTo("/assets/new"))">
                <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-2" />Add Asset
            </MudButton>
        </MudItem>
    </MudGrid>

    <MudPaper Class="mt-3">
        <MudTable Items="@assets" Dense="true" Hover="true" Striped="true" Bordered="true">
            <ToolBarContent>
                <MudText Typo="Typo.h6"><MudIcon Icon="@Icons.Material.Filled.DirectionsBus" Style="color: #9C27B0;" /> Assets</MudText>
                @if (isLoading)
                {
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" Style="margin-left: 10px;" />
                }
                <MudSpacer />
                <MudTextField Value="@searchString" Immediate="true" ValueChanged="@((string newValue) => OnSearchTextChanged(newValue))" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>

            <HeaderContent>
                <MudTh><MudTableSortLabel SortBy="new Func<AssetDto, object>(x=>x.Code)">Asset Code</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<AssetDto, object>(x=>x.Emitter)">Emitter</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<AssetDto, object>(x=>x.OwnerDocumentNumber)">Owner Document Number</MudTableSortLabel></MudTh>
                <MudTh>Status</MudTh>
                <MudTh>Action</MudTh>
            </HeaderContent>

            <RowTemplate>
                <MudTd DataLabel="Asset Code">@context.Code</MudTd>
                <MudTd DataLabel="Emitter">@context.Emitter</MudTd>
                <MudTd DataLabel="Owner Document Number">@context.OwnerDocumentNumber</MudTd>
                <MudTd DataLabel="Status">
                    @if (context.IsActive)
                    {
                        <MudChip Color="Color.Success" OnClick="@(()=> ToggleState(context.Id, context.IsActive))">Active</MudChip>
                    }
                    else
                    {
                        <MudChip Color="Color.Error" OnClick="@(()=> ToggleState(context.Id, context.IsActive))">Inactive</MudChip>
                    }
                </MudTd>
                <MudTd DataLabel="Action">
                    <div style="white-space:nowrap">
                        <MudIconButton Icon="@Icons.Material.Filled.Search" OnClick="@(()=> navigationManager.NavigateTo($"/assets/{context.Id}"))" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(()=> DeleteAsset(context.Id))" />
                    </div>
                </MudTd>
            </RowTemplate>

            <PagerContent>
                <MudTablePager RowsPerPageString="No. of rows per page" InfoFormat="{first_item}-{last_item} of {all_items}" />
            </PagerContent>
        </MudTable>
    </MudPaper>

</div>

@code {
    private bool isLoading = true;
    private MarkupString notificationMessage = default;
    private string searchString = "";
    private int totalItems;
    private int currentPage = 1;
    private const int pageSize = 10;

    private List<AssetDto> assets = new List<AssetDto>();
    private List<AssetDto> allAssets = new List<AssetDto>();


    protected override async Task OnInitializedAsync()
    {
        var response = await apiClient.SendRequest<ApiResponseDto<List<AssetDto>>>("ScannersApi.Asset.GetAll");

        if (response.Succeeded && response.Data != null)
        {
            if (response.Data.Count() > 0)
            {
                allAssets = response.Data;
                assets = allAssets.ToList();
            }
            else
            {
                await ShowNotification($"No assets have been registered.");
            }
        }
        else
        {
            await ShowNotification($"Error retrieving the data from the API.");
        }

        isLoading = false;
    }

    private void OnSearchTextChanged(string newValue)
    {
        searchString = newValue;
        currentPage = 1;

        FilterAssets();
    }

    private void FilterAssets()
    {
        if (!string.IsNullOrWhiteSpace(searchString))
        {
            assets = allAssets.Where(asset =>
            asset.Code.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
            asset.Emitter.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
            asset.OwnerDocumentNumber.Contains(searchString, StringComparison.OrdinalIgnoreCase)).ToList();
        }
        else
        {
            assets = allAssets.ToList();
        }
    }

    private async Task ToggleState(long assetId, bool active)
    {
        var asset = assets.Find(x => x.Id == assetId);

        if (asset != null)
        {
            asset.SwitchStatus();

            var response = await apiClient.SendRequest<ApiResponseDto<AssetDto>>("ScannersApi.Asset.Update", new { StatusId = asset.StatusId }, new Dictionary<string, string> { { "id", asset.Id.ToString() } });

            if (!response.Succeeded)
            {
                asset.SwitchStatus();
                await ShowNotification($"Error changing the state of the asset '{asset.Code}'", true);
            }
        }
    }

    private async Task DeleteAsset(long assetId)
    {
        var response = await apiClient.SendRequest<ApiResponseDto<AssetDto>>("ScannersApi.Asset.Delete", null, new Dictionary<string, string> { { "id", assetId.ToString() } });

        if (response.Succeeded)
        {
            allAssets.RemoveAll(x => x.Id == assetId);
            assets = allAssets.ToList();
        }
        else
        {
            await ShowNotification(string.Join(". ", response.Errors ?? new List<string> { "Error." }));
        }
    }

    private async Task ShowNotification(string msg, bool temporary = false)
    {
        notificationMessage = new MarkupString(msg);
        StateHasChanged();
        if (temporary)
        {
            await Task.Delay(5000);
            notificationMessage = default;
        }
    }
}
